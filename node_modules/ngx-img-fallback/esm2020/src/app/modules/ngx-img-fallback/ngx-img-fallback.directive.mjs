/**
 * Created by vadimdez on 28/01/2018.
 */
import { Directive, Input, Output, EventEmitter } from '@angular/core';
import * as i0 from "@angular/core";
export class ImgFallbackDirective {
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.loaded = new EventEmitter();
        this.isApplied = false;
        this.ERROR_EVENT_TYPE = 'error';
        this.LOAD_EVENT_TYPE = 'load';
        this.nativeElement = el.nativeElement;
        this.onError = this.onError.bind(this);
        this.onLoad = this.onLoad.bind(this);
        this.addEvents();
    }
    ngOnDestroy() {
        this.removeErrorEvent();
        this.removeOnLoadEvent();
    }
    onError() {
        if (this.nativeElement.getAttribute('src') !== this.imgSrc) {
            this.isApplied = true;
            this.renderer.setAttribute(this.nativeElement, 'src', this.imgSrc);
        }
        else {
            this.removeOnLoadEvent();
        }
    }
    onLoad() {
        this.loaded.emit(this.isApplied);
    }
    removeErrorEvent() {
        if (this.cancelOnError) {
            this.cancelOnError();
        }
    }
    removeOnLoadEvent() {
        if (this.cancelOnLoad) {
            this.cancelOnLoad();
        }
    }
    addEvents() {
        this.cancelOnError = this.renderer.listen(this.nativeElement, this.ERROR_EVENT_TYPE, this.onError);
        this.cancelOnLoad = this.renderer.listen(this.nativeElement, this.LOAD_EVENT_TYPE, this.onLoad);
    }
}
ImgFallbackDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.10", ngImport: i0, type: ImgFallbackDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
ImgFallbackDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.10", type: ImgFallbackDirective, selector: "[src-fallback]", inputs: { imgSrc: ["src-fallback", "imgSrc"] }, outputs: { loaded: "loaded" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.10", ngImport: i0, type: ImgFallbackDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[src-fallback]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { imgSrc: [{
                type: Input,
                args: ['src-fallback']
            }], loaded: [{
                type: Output,
                args: ['loaded']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWltZy1mYWxsYmFjay5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvYXBwL21vZHVsZXMvbmd4LWltZy1mYWxsYmFjay9uZ3gtaW1nLWZhbGxiYWNrLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRztBQUNILE9BQU8sRUFBRSxTQUFTLEVBQWMsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQXdCLE1BQU0sZUFBZSxDQUFDOztBQUt6RyxNQUFNLE9BQU8sb0JBQW9CO0lBVy9CLFlBQW9CLEVBQWMsRUFBVSxRQUFtQjtRQUEzQyxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQVI3QyxXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQVcsQ0FBQztRQUUvQyxjQUFTLEdBQVksS0FBSyxDQUFDO1FBQzNCLHFCQUFnQixHQUFXLE9BQU8sQ0FBQztRQUNuQyxvQkFBZSxHQUFXLE1BQU0sQ0FBQztRQUt2QyxJQUFJLENBQUMsYUFBYSxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUM7UUFFdEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFTyxPQUFPO1FBQ2IsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsS0FBSyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQzFELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1lBQ3RCLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNwRTthQUFNO1lBQ0wsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7U0FDMUI7SUFDSCxDQUFDO0lBRU8sTUFBTTtRQUNaLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRU8sZ0JBQWdCO1FBQ3RCLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUN0QixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDdEI7SUFDSCxDQUFDO0lBRU8saUJBQWlCO1FBQ3ZCLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNyQixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDckI7SUFDSCxDQUFDO0lBRU8sU0FBUztRQUNmLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ25HLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNsRyxDQUFDOztrSEFwRFUsb0JBQW9CO3NHQUFwQixvQkFBb0I7NEZBQXBCLG9CQUFvQjtrQkFIaEMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO2lCQUMzQjt5SEFHd0IsTUFBTTtzQkFBNUIsS0FBSzt1QkFBQyxjQUFjO2dCQUNILE1BQU07c0JBQXZCLE1BQU07dUJBQUMsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlZCBieSB2YWRpbWRleiBvbiAyOC8wMS8yMDE4LlxuICovXG5pbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgT25EZXN0cm95LCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW3NyYy1mYWxsYmFja10nXG59KVxuZXhwb3J0IGNsYXNzIEltZ0ZhbGxiYWNrRGlyZWN0aXZlIGltcGxlbWVudHMgT25EZXN0cm95IHtcblxuICBASW5wdXQoJ3NyYy1mYWxsYmFjaycpIGltZ1NyYyE6IHN0cmluZztcbiAgQE91dHB1dCgnbG9hZGVkJykgbG9hZGVkID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuICBwcml2YXRlIG5hdGl2ZUVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuICBwcml2YXRlIGlzQXBwbGllZDogYm9vbGVhbiA9IGZhbHNlO1xuICBwcml2YXRlIEVSUk9SX0VWRU5UX1RZUEU6IHN0cmluZyA9ICdlcnJvcic7XG4gIHByaXZhdGUgTE9BRF9FVkVOVF9UWVBFOiBzdHJpbmcgPSAnbG9hZCc7XG4gIHByaXZhdGUgY2FuY2VsT25FcnJvciE6IEZ1bmN0aW9uO1xuICBwcml2YXRlIGNhbmNlbE9uTG9hZCE6IEZ1bmN0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge1xuICAgIHRoaXMubmF0aXZlRWxlbWVudCA9IGVsLm5hdGl2ZUVsZW1lbnQ7XG5cbiAgICB0aGlzLm9uRXJyb3IgPSB0aGlzLm9uRXJyb3IuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uTG9hZCA9IHRoaXMub25Mb2FkLmJpbmQodGhpcyk7XG4gICAgdGhpcy5hZGRFdmVudHMoKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMucmVtb3ZlRXJyb3JFdmVudCgpO1xuICAgIHRoaXMucmVtb3ZlT25Mb2FkRXZlbnQoKTtcbiAgfVxuXG4gIHByaXZhdGUgb25FcnJvcigpIHtcbiAgICBpZiAodGhpcy5uYXRpdmVFbGVtZW50LmdldEF0dHJpYnV0ZSgnc3JjJykgIT09IHRoaXMuaW1nU3JjKSB7XG4gICAgICB0aGlzLmlzQXBwbGllZCA9IHRydWU7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLm5hdGl2ZUVsZW1lbnQsICdzcmMnLCB0aGlzLmltZ1NyYyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVtb3ZlT25Mb2FkRXZlbnQoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIG9uTG9hZCgpIHtcbiAgICB0aGlzLmxvYWRlZC5lbWl0KHRoaXMuaXNBcHBsaWVkKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVtb3ZlRXJyb3JFdmVudCgpIHtcbiAgICBpZiAodGhpcy5jYW5jZWxPbkVycm9yKSB7XG4gICAgICB0aGlzLmNhbmNlbE9uRXJyb3IoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHJlbW92ZU9uTG9hZEV2ZW50KCkge1xuICAgIGlmICh0aGlzLmNhbmNlbE9uTG9hZCkge1xuICAgICAgdGhpcy5jYW5jZWxPbkxvYWQoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFkZEV2ZW50cygpIHtcbiAgICB0aGlzLmNhbmNlbE9uRXJyb3IgPSB0aGlzLnJlbmRlcmVyLmxpc3Rlbih0aGlzLm5hdGl2ZUVsZW1lbnQsIHRoaXMuRVJST1JfRVZFTlRfVFlQRSwgdGhpcy5vbkVycm9yKTtcbiAgICB0aGlzLmNhbmNlbE9uTG9hZCA9IHRoaXMucmVuZGVyZXIubGlzdGVuKHRoaXMubmF0aXZlRWxlbWVudCwgdGhpcy5MT0FEX0VWRU5UX1RZUEUsIHRoaXMub25Mb2FkKTtcbiAgfVxufVxuIl19